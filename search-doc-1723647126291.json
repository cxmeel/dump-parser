[{"title":"FetchDump","type":0,"sectionRef":"#","url":"/dump-parser/api/FetchDump","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"FetchDump","url":"/dump-parser/api/FetchDump#functions","content":" "},{"title":"fetchLatestVersionHash​","type":1,"pageTitle":"FetchDump","url":"/dump-parser/api/FetchDump#fetchLatestVersionHash","content":"&lt;/&gt; FetchDump.fetchLatestVersionHash() → string Fetches the latest Roblox version hash from the Roblox API.  "},{"title":"fetchVersionHash​","type":1,"pageTitle":"FetchDump","url":"/dump-parser/api/FetchDump#fetchVersionHash","content":"&lt;/&gt; FetchDump.fetchVersionHash(version: string?) → string Fetches the Roblox version hash for the given version from the Roblox API. If no version is provided, it will default to the current version.  "},{"title":"fetchVersionHashWithFallback​","type":1,"pageTitle":"FetchDump","url":"/dump-parser/api/FetchDump#fetchVersionHashWithFallback","content":"&lt;/&gt; FetchDump.fetchVersionHashWithFallback(version: string?) → string Fetches the Roblox version hash for the given version from the Roblox API. If no version is provided, it will default to the current version. If the version hash cannot be found within the deployment history, it will fallback to the latest version hash on the server.  "},{"title":"fetchDump​","type":1,"pageTitle":"FetchDump","url":"/dump-parser/api/FetchDump#fetchDump","content":"&lt;/&gt; FetchDump.fetchDump(hashOrVersion: string?) → ( APIDump, versionHash ) Fetches the API dump for the current version of Roblox from the Roblox API. If a hash or version is provided, it will attempt to fetch the dump for that hash or version. "},{"title":"Filter","type":0,"sectionRef":"#","url":"/dump-parser/api/Filter","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Filter","url":"/dump-parser/api/Filter#properties","content":" "},{"title":"Deprecated​","type":1,"pageTitle":"Filter","url":"/dump-parser/api/Filter#Deprecated","content":"&lt;/&gt; Filter.Deprecated: GenericFilter&lt;Item&gt;   "},{"title":"ReadOnly​","type":1,"pageTitle":"Filter","url":"/dump-parser/api/Filter#ReadOnly","content":"&lt;/&gt; Filter.ReadOnly: GenericFilter&lt;Item&gt;   "},{"title":"Replicated​","type":1,"pageTitle":"Filter","url":"/dump-parser/api/Filter#Replicated","content":"&lt;/&gt; Filter.Replicated: GenericFilter&lt;Item&gt;   "},{"title":"Scriptable​","type":1,"pageTitle":"Filter","url":"/dump-parser/api/Filter#Scriptable","content":"&lt;/&gt; Filter.Scriptable: GenericFilter&lt;Item&gt;   "},{"title":"Yields​","type":1,"pageTitle":"Filter","url":"/dump-parser/api/Filter#Yields","content":"&lt;/&gt; Filter.Yields: GenericFilter&lt;Item&gt;   "},{"title":"ThreadSafe​","type":1,"pageTitle":"Filter","url":"/dump-parser/api/Filter#ThreadSafe","content":"&lt;/&gt; Filter.ThreadSafe: GenericFilter&lt;Item&gt;   "},{"title":"Readable​","type":1,"pageTitle":"Filter","url":"/dump-parser/api/Filter#Readable","content":"&lt;/&gt; Filter.Readable: GenericFilter&lt;Item&gt;   "},{"title":"Writable​","type":1,"pageTitle":"Filter","url":"/dump-parser/api/Filter#Writable","content":"&lt;/&gt; Filter.Writable: GenericFilter&lt;Item&gt;   "},{"title":"Service​","type":1,"pageTitle":"Filter","url":"/dump-parser/api/Filter#Service","content":"&lt;/&gt; Filter.Service: GenericFilter&lt;Item&gt;  "},{"title":"Functions​","type":1,"pageTitle":"Filter","url":"/dump-parser/api/Filter#functions","content":" "},{"title":"HasTags​","type":1,"pageTitle":"Filter","url":"/dump-parser/api/Filter#HasTags","content":"&lt;/&gt; Filter.HasTags(...: string) → GenericFilter&lt;Item&gt; Checks if the given Item has any of the given tags. If multiple tags are given, then the Item must have all of the tags in order to pass the filter.  "},{"title":"HasSecurity​","type":1,"pageTitle":"Filter","url":"/dump-parser/api/Filter#HasSecurity","content":"&lt;/&gt; Filter.HasSecurity(levels: SecurityLevels | string) → GenericFilter&lt;Item&gt; "},{"title":"Types","type":1,"pageTitle":"Filter","url":"/dump-parser/api/Filter##","content":""},{"title":"​","type":1,"pageTitle":"Filter","url":"/dump-parser/api/Filter#SecurityLevels","content":"interface SecurityLevels { Read: (string | {string})? Write: (string | {string})? }  Accepts a SecurityLevels object or a string. If a string is passed, both Read and Write will be set to that string. SecurityLevels can also accept an array of strings for Read and Write, which will be used as an OR condition, meaning that the object will be accepted if it matches any of the strings in the array. This filter can also be used on [Items] whose Security field is a string, such as Functions.  "},{"title":"Invert​","type":1,"pageTitle":"Filter","url":"/dump-parser/api/Filter#Invert","content":"&lt;/&gt; Filter.Invert(filter: GenericFilter&lt;Item&gt;) → GenericFilter&lt;Item&gt; Inverts the given filter. If the filter returns true, then this filter will return false, and vice versa. For example: local NonDeprecated = Filter.Invert(Filter.Deprecated)   "},{"title":"MemberType​","type":1,"pageTitle":"Filter","url":"/dump-parser/api/Filter#MemberType","content":"&lt;/&gt; Filter.MemberType(memberType: string) → GenericFilter&lt;Item&gt; Checks if the given Item is of the given member type; for example, when trying to access only members which are of type &quot;Property&quot;.  "},{"title":"Name​","type":1,"pageTitle":"Filter","url":"/dump-parser/api/Filter#Name","content":"&lt;/&gt; Filter.Name(name: string) → GenericFilter&lt;Item&gt; Checks if the given Item's name matches the given string.  "},{"title":"Any​","type":1,"pageTitle":"Filter","url":"/dump-parser/api/Filter#Any","content":"&lt;/&gt; Filter.Any(...: GenericFilter&lt;Item&gt;) → GenericFilter&lt;Item&gt; Combines multiple filters into a single filter. The returned filter will return true if any of the given filters return true. If no filters are given, then the returned filter will always return true, but will print a warning to the output.  "},{"title":"ValueType​","type":1,"pageTitle":"Filter","url":"/dump-parser/api/Filter#ValueType","content":"&lt;/&gt; Filter.ValueType(type: string | nil) → GenericFilter&lt;Item&gt; Returns true for any Item whose ValueType field is of the given type. Primitive Luau types, such as string or number can be used; they will automatically be mapped to the corresponding ValueType string (e.g. number can refer to float, double, int, etc.). "},{"title":"Dump","type":0,"sectionRef":"#","url":"/dump-parser/api/Dump","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Dump","url":"/dump-parser/api/Dump#properties","content":" "},{"title":"Filter​","type":1,"pageTitle":"Dump","url":"/dump-parser/api/Dump#Filter","content":"&lt;/&gt; Dump.Filter: Filter A frozen list of various filters that can be used to filter out API members from the dump. This is useful for filtering members, such as those that are deprecated or inaccessible to non-CoreScripts.  "},{"title":"Types​","type":1,"pageTitle":"Dump","url":"/dump-parser/api/Dump#Types","content":"&lt;/&gt; Dump.Types: {} A reference to the Types module, which contains various types used within the API dump parser. "},{"title":"Functions​","type":1,"pageTitle":"Dump","url":"/dump-parser/api/Dump#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Dump","url":"/dump-parser/api/Dump#new","content":"&lt;/&gt; Dump.new(dump: APIDump) → Dump Creates a new Dump instance from the given API dump. We don't necessarily care where the dump came from, as long as it's properly formatted.  "},{"title":"fetchRawDump​","type":1,"pageTitle":"Dump","url":"/dump-parser/api/Dump#fetchRawDump","content":"&lt;/&gt; Dump.fetchRawDump(hashOrVersion: string?) → ( APIDump, versionHash ) Fetches the raw API dump for the current version of Roblox from the Roblox API. If a hash or version is provided, it will attempt to fetch the dump for that hash or version.  "},{"title":"fetchFromServer​","type":1,"pageTitle":"Dump","url":"/dump-parser/api/Dump#fetchFromServer","content":"&lt;/&gt; Dump.fetchFromServer(hashOrVersion: string?) → Dump Performs the same actions as fetchRawDump, but returns a Dump instance instead of the raw API data.  "},{"title":"GetAncestry​","type":1,"pageTitle":"Dump","url":"/dump-parser/api/Dump#GetAncestry","content":"&lt;/&gt; Dump:GetAncestry(class: string | Class) → {string} Given a class, returns an array of class names the current class inherits, where the first entry is top-level ancestor.  "},{"title":"GetClasses​","type":1,"pageTitle":"Dump","url":"/dump-parser/api/Dump#GetClasses","content":"&lt;/&gt; Dump:GetClasses(...: (string | Instance | GenericFilter&lt;Class&gt;)?) → {[string]: Class} Gets all the classes from the API dump. If any arguments are passed, it will filter the classes based on the given arguments.  "},{"title":"GetClass​","type":1,"pageTitle":"Dump","url":"/dump-parser/api/Dump#GetClass","content":"&lt;/&gt; Dump:GetClass(class: string | Instance ) → Class Gets the class with the given name from the API dump. If the class is not found, it will throw an error. If an instance is passed, it will determine the class name from Instance.ClassName.  "},{"title":"GetProperties​","type":1,"pageTitle":"Dump","url":"/dump-parser/api/Dump#GetProperties","content":"&lt;/&gt; Dump:GetProperties( class: string | Instance , ...: (string | GenericFilter&lt;Property&gt;)? ) → {[string]: Property} Gets a list of properties for the given class. If an Instance is passed, it will determine the class from Instance.ClassName. Additional arguments can be passed to filter the properties. This differs from Class:GetProperties in that it will return a pre-filtered table of properties, where properties are not deprecated and are safe to read from normal scripts. Consider adding the Filter.Invert(Filter.ReadOnly) filter to filter out read-only properties. Filter.Invert(Filter.HasTag(&quot;Hidden&quot;)) may also be useful in certain scenarios.  "},{"title":"GetChangedProperties​","type":1,"pageTitle":"Dump","url":"/dump-parser/api/Dump#GetChangedProperties","content":"&lt;/&gt; Dump:GetChangedProperties( instance: Instance , ...: (string | GenericFilter&lt;Property&gt;)? ) → {[string]: Property} Gets a list of properties that have been changed from the default value for the given instance. "},{"title":"Class","type":0,"sectionRef":"#","url":"/dump-parser/api/Class","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Class","url":"/dump-parser/api/Class#properties","content":" "},{"title":"Name​","type":1,"pageTitle":"Class","url":"/dump-parser/api/Class#Name","content":"&lt;/&gt; Class.Name: string   "},{"title":"Superclass​","type":1,"pageTitle":"Class","url":"/dump-parser/api/Class#Superclass","content":"&lt;/&gt; Class.Superclass: string   "},{"title":"Types","type":0,"sectionRef":"#","url":"/dump-parser/api/Types","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Types","url":"/dump-parser/api/Types#types","content":" "},{"title":"GenericFilter​","type":1,"pageTitle":"Types","url":"/dump-parser/api/Types#GenericFilter","content":"&lt;/&gt; type GenericFilter = &lt;T&gt;(object: T) → any? A generic filter function that takes an object of type T and returns a boolean value indicating whether or not the object should be included in the result.  "},{"title":"Property​","type":1,"pageTitle":"Types","url":"/dump-parser/api/Types#Property","content":"&lt;/&gt; interface Property { MemberType: &quot;Property&quot; Category: string Name: string Security: { Read: string, Write: string } Serialization: { CanLoad: boolean, CanSave: boolean } Tags: {string}? ThreadSafety: string ValueType: { Category: string, Name: string } }   "},{"title":"Function​","type":1,"pageTitle":"Types","url":"/dump-parser/api/Types#Function","content":"&lt;/&gt; interface Function { MemberType: &quot;Function&quot; Name: string Parameters: {{ Name: string, Type: string, Default: string? }} ReturnType: { Category: string, Name: string } Security: string Tags: {string}? ThreadSafety: string }   "},{"title":"Event​","type":1,"pageTitle":"Types","url":"/dump-parser/api/Types#Event","content":"&lt;/&gt; interface Event { MemberType: &quot;Event&quot; Name: string Parameters: {{ Name: string, Type: string }} Security: string Tags: {string}? ThreadSafety: string }   "},{"title":"Callback​","type":1,"pageTitle":"Types","url":"/dump-parser/api/Types#Callback","content":"&lt;/&gt; interface Callback { MemberType: &quot;Callback&quot; Name: string Parameters: {{ Name: string, Type: string }} ReturnType: { Category: string, Name: string } Security: string Tags: {string}? ThreadSafety: string }   "},{"title":"APIDump​","type":1,"pageTitle":"Types","url":"/dump-parser/api/Types#APIDump","content":"&lt;/&gt; type APIDump = { Classes: {[any]: any}, [string]: any } An API dump is a table that contains the raw Roblox API dump data. As a minimum, the Dump expects an APIDump to contain a Classes array.  "},{"title":"Member​","type":1,"pageTitle":"Types","url":"/dump-parser/api/Types#Member","content":"&lt;/&gt; type Member = Property | Function | Event | Callback   "},{"title":"Class​","type":1,"pageTitle":"Types","url":"/dump-parser/api/Types#Class","content":"&lt;/&gt; interface Class { Members: {Member} MemoryCategory: string Name: string Superclass: string Tags: {string}? }   "},{"title":"ClassWithInheritance​","type":1,"pageTitle":"Types","url":"/dump-parser/api/Types#ClassWithInheritance","content":"&lt;/&gt; type ClassWithInheritance = Class&amp;{Inherits: {string}}   "},{"title":"Item​","type":1,"pageTitle":"Types","url":"/dump-parser/api/Types#Item","content":"&lt;/&gt; type Item = Member | Class  "},{"title":"Members​","type":1,"pageTitle":"Class","url":"/dump-parser/api/Class#Members","content":"&lt;/&gt; Class.Members: {Member}   "},{"title":"Tags​","type":1,"pageTitle":"Class","url":"/dump-parser/api/Class#Tags","content":"&lt;/&gt; Class.Tags: {string}?   "},{"title":"Inherits​","type":1,"pageTitle":"Class","url":"/dump-parser/api/Class#Inherits","content":"&lt;/&gt; Class.Inherits: {string}  "},{"title":"Functions​","type":1,"pageTitle":"Class","url":"/dump-parser/api/Class#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Class","url":"/dump-parser/api/Class#new","content":"&lt;/&gt; Class.new(classEntry: Class) → Class Creates a new Class instance from the given class entry. Classes are cached, so if a class with the same name has already been constructed, it will return that instead.  "},{"title":"GetProperties​","type":1,"pageTitle":"Class","url":"/dump-parser/api/Class#GetProperties","content":"&lt;/&gt; Class:GetProperties(...: (string | GenericFilter&lt;Property&gt;)?) → {[string]: Property} Returns a table of all properties that match the given filters. A filter may be a string (property name), or a table of filters. A property must match all of the given filters in order to pass. If no filters are given, all properties are returned. The resulting table is a dictionary of properties, where the key is the property name and the value is the property object from the API dump.  "},{"title":"GetProperty​","type":1,"pageTitle":"Class","url":"/dump-parser/api/Class#GetProperty","content":"&lt;/&gt; Class:GetProperty(name: string) → Property? Returns the property with the given name, or nil if it does not exist.  "},{"title":"GetEvents​","type":1,"pageTitle":"Class","url":"/dump-parser/api/Class#GetEvents","content":"&lt;/&gt; Class:GetEvents(...: (string | GenericFilter&lt;Event&gt;)?) → {[string]: Event} Returns a table of all events that match the given filters. A filter may be a string (event name), or a table of filters.  "},{"title":"GetEvent​","type":1,"pageTitle":"Class","url":"/dump-parser/api/Class#GetEvent","content":"&lt;/&gt; Class:GetEvent(name: string) → Event? Returns the event with the given name, or nil if it does not exist.  "},{"title":"GetFunctions​","type":1,"pageTitle":"Class","url":"/dump-parser/api/Class#GetFunctions","content":"&lt;/&gt; Class:GetFunctions(...: (string | GenericFilter&lt;Function&gt;)?) → {[string]: Function} Returns a table of all functions that match the given filters. A filter may be a string (function name), or a table of filters.  "},{"title":"GetFunction​","type":1,"pageTitle":"Class","url":"/dump-parser/api/Class#GetFunction","content":"&lt;/&gt; Class:GetFunction(name: string) → Function? Returns the function with the given name, or nil if it does not exist.  "},{"title":"GetCallbacks​","type":1,"pageTitle":"Class","url":"/dump-parser/api/Class#GetCallbacks","content":"&lt;/&gt; Class:GetCallbacks(...: (string | GenericFilter&lt;Callback&gt;)?) → {[string]: Callback} Returns a table of all callbacks that match the given filters. A filter may be a string (callback name), or a table of filters.  "},{"title":"GetCallback​","type":1,"pageTitle":"Class","url":"/dump-parser/api/Class#GetCallback","content":"&lt;/&gt; Class:GetCallback(name: string) → Callback? Returns the callback with the given name, or nil if it does not exist. "}]